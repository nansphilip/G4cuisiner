generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String  @id @unique
    name          String
    email         String  @unique
    emailVerified Boolean
    image         String?
    role          Role    @default(USER)
    restricted    Boolean @default(false)

    // One to Many
    Session Session[]
    Account Account[]
    Recipe  Recipe[]

    // Many to Many (explicit)
    Review   Review[]
    Favorite Favorite[]
    Rating   Rating[]

    // Many to Many (implicit)
    ReviewThumbsUp   Review[] @relation("ThumbsPositive")
    ReviewThumbsDown Review[] @relation("ThumbsNegative")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("user")
}

enum Role {
    USER
    MODO
    ADMIN
}

model Session {
    id        String   @id @unique
    expiresAt DateTime
    ipAddress String?
    userAgent String?

    // Many to One
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("session")
}

model Account {
    id         String @id @unique
    accountId  String
    providerId String

    // Many to One
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    accessToken  String?
    refreshToken String?
    idToken      String?
    expiresAt    DateTime?
    password     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("account")
}

model Ingredient {
    id          String  @id @unique @default(uuid())
    name        String  @unique
    description String
    image       String?

    // Many to Many (explicit)
    Quantity Quantity[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Recipe {
    id          String @id @unique @default(uuid())
    title       String @unique
    slug        String @unique
    description String

    numberOfServing Int // in person
    preparationTime Int // in minutes

    difficultyLevel Difficulty @default(MEDIUM)
    lunchType       LunchType
    lunchStep       LunchStep
    Steps String @db.LongText //Recipe steps with a string
    status          Status @default(PENDING)


    // One to Many
    Image Image[]

    // Many to One
    userId String
    User   User   @relation(fields: [userId], references: [id])

    // Many to Many (implicit)
    Review   Review[]
    Favorite Favorite[]
    Rating   Rating[]

    // Many to Many (explicit)
    Quantity Quantity[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    PENDING
    APPROVED
    REJECTED
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

enum LunchType {
    BREAKFAST
    LUNCH
    BRUNCH
    DINNER
    SNACK
}

enum LunchStep {
    APPETIZER
    STARTER
    MAIN
    DESSERT
}

model Image {
    url String @unique
    alt String

    // Many to One
    recipeId String
    recipe   Recipe @relation(fields: [recipeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Favorite {
    id       String  @id @unique @default(uuid())
    favorite Boolean

    // Many to One
    userId String
    User   User   @relation(fields: [userId], references: [id])

    // Many to One
    recipeId String
    Recipe   Recipe @relation(fields: [recipeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, recipeId])
}

model Review {
    id     String @id @unique @default(uuid())
    review String @db.LongText

    // Many to One
    userId String
    User   User   @relation(fields: [userId], references: [id])

    // Many to One
    recipeId String
    Recipe   Recipe @relation(fields: [recipeId], references: [id])

    // Many to Many (implicit)
    thumbsPositive User[] @relation("ThumbsPositive")
    thumbsNegative User[] @relation("ThumbsNegative")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Rating {
    id     String @id @unique @default(uuid())
    rating Int

    // Many to One
    userId String
    User   User   @relation(fields: [userId], references: [id])

    // Many to One
    recipeId String
    Recipe   Recipe @relation(fields: [recipeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, recipeId])
}

model Quantity {
    id       String @id @unique @default(uuid())
    quantity Float
    unit     Unit

    // Many to One
    recipeId String
    recipe   Recipe @relation(fields: [recipeId], references: [id])

    // Many to One
    ingredientId String
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([recipeId, ingredientId])
}

enum Unit {
    GRAM
    KILOGRAM
    LITER
    CENTILITER
    MILLILITER
    PIECE
}
